(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2986],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return s}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=u(t),s=i,k=d["".concat(l,".").concat(s)]||d[s]||m[s]||a;return t?r.createElement(k,o(o({ref:n},c),{},{components:t})):r.createElement(k,o({ref:n},c))}));function s(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5749:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return p},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var r=t(2122),i=t(9756),a=(t(7294),t(3905)),o=["components"],p={id:"leetcode96",title:"96. Unique Binary Search Trees",Keyword:["Binary Search Tree","LeetCode","Dynamic Programming"],parse_number_prefixes:!0},l={unversionedId:"Dynamic Programming/leetcode96",id:"Dynamic Programming/leetcode96",isDocsHomePage:!1,title:"96. Unique Binary Search Trees \u2014 Medium",description:"Given an integer n, return the number of structurally unique *BST'* s (binary search trees) which has exactly n nodes of unique values from 1 to n.",source:"@site/docs/Dynamic Programming/96. Unique Binary Search Trees.md",sourceDirName:"Dynamic Programming",slug:"/Dynamic Programming/leetcode96",permalink:"/docs/Dynamic Programming/leetcode96",editUrl:"https://github.com/shuoO-24/blog-site/tree/main/docs/docs/Dynamic Programming/96. Unique Binary Search Trees.md",version:"current",sidebarPosition:96,frontMatter:{id:"leetcode96",title:"96. Unique Binary Search Trees",Keyword:["Binary Search Tree","LeetCode","Dynamic Programming"],parse_number_prefixes:!0},sidebar:"tutorialSidebar",previous:{title:"91. Decode Ways \u2014 Medium",permalink:"/docs/Dynamic Programming/leetcode91"},next:{title:"300. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217",permalink:"/docs/Dynamic Programming/leetcode300"}},u=[{value:"Key take away",id:"key-take-away",children:[{value:"\u4e8c\u53c9\u641c\u7d22\u6811",id:"\u4e8c\u53c9\u641c\u7d22\u6811",children:[]},{value:"\u5206\u6cbb\u9012\u5f52",id:"\u5206\u6cbb\u9012\u5f52",children:[]}]},{value:"\u601d\u8def",id:"\u601d\u8def",children:[{value:"\u4ee3\u7801",id:"\u4ee3\u7801",children:[]},{value:"\u4f18\u5316",id:"\u4f18\u5316",children:[]}]}],c={toc:u};function m(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Given an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),", return ",(0,a.kt)("em",{parentName:"p"},"the number of structurally unique ",(0,a.kt)("strong",{parentName:"em"},"BST'")," s (binary search trees) which has exactly")," ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," ",(0,a.kt)("em",{parentName:"p"},"nodes of unique values from")," ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," ",(0,a.kt)("em",{parentName:"p"},"to")," ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg",alt:"img"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 3\nOutput: 5\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 1\nOutput: 1 \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"1 <= n <= 19"))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"key-take-away"},"Key take away"),(0,a.kt)("h3",{id:"\u4e8c\u53c9\u641c\u7d22\u6811"},"\u4e8c\u53c9\u641c\u7d22\u6811"),(0,a.kt)("p",null,"\u4ee51 ... n \u4e3a\u8282\u70b9\u7ec4\u6210\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4e0d\u540c\u7684\u6811\u5728\u4e8e\u6839\u7ed3\u70b9\u7684\u4e0d\u540c\u548c\u5de6\u53f3\u5b50\u6811\u7684\u4e0d\u540c"),(0,a.kt)("h3",{id:"\u5206\u6cbb\u9012\u5f52"},"\u5206\u6cbb\u9012\u5f52"),(0,a.kt)("p",null,"\u5c06\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u60c5\u51b5\u5206\u522b\u8fdb\u884c\u8ba8\u8bba"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"\u601d\u8def"},"\u601d\u8def"),(0,a.kt)("p",null,"\u5bf9\u4e8en\u4e2a\u8282\u70b9\uff0c\u9664\u53bb\u6839\u8282\u70b9\u4e4b\u540e\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u7684\u5206\u522b\u6709\u5982\u4e0b\u6570\u91cf\u7684\u8282\u70b9\uff1a"),(0,a.kt)("p",null,"(0, n - 1), (1, n - 2), (2, n - 3), ....(n - 1, 0)"),(0,a.kt)("p",null,"\u6240\u4ee5\uff0c\u5f53\u6839\u8282\u70b9\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," \u65f6\uff0c\u5de6\u5b50\u6811 A \u7684\u8282\u70b9\u6570\u91cf\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"i - 1")," \uff0c\u53f3\u5b50\u6811 B \u7684\u8282\u70b9\u6570\u91cf\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"n - i")),(0,a.kt)("p",null,"\u6700\u540e\u9012\u5f52\uff0c\u5e76\u5c06\u5de6\u5b50\u6811 A \u548c\u53f3\u5b50\u6811 B \u7684\u7ed3\u679c\u76f8\u4e58\u5373\u53ef\u3002"),(0,a.kt)("h4",{id:"\u6613\u9519\u70b9"},"\u6613\u9519\u70b9"),(0,a.kt)("p",null,"\u26a0\ufe0f\u4e0d\u8981\u5728\u8ba1\u7b97 ",(0,a.kt)("inlineCode",{parentName:"p"},"dp[i]")," \u65f6\u5c06\u5176\u521d\u59cb\u5316\u4e3a1"),(0,a.kt)("p",null,"\u7528\u4e00\u4e2ahelper function\u6765\u8ba1\u7b97 ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," \u4e2a\u8282\u70b9\u6240\u80fd\u62e5\u6709\u7684\u5b50\u6811\u6570\u91cf \u2014> \u7a7a\u95f4\u590d\u6742\u5ea6\u9ad8\uff0c\u53ef\u4f18\u5316"),(0,a.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"class Solution {\npublic:\n    vector<int> visited;\n    int numTrees(int n) {\n        // assign vector\n        visited.assign(n + 1, 0);\n        // if 0 node: 1(since will be multiplied with dp(n - i - 1))\n        visited[0] = 1;\n        // for n nodes\n        if (n <= 1) return 1;\n        return dp(n);\n    }\n    \n    int dp(int n) {\n        // last node(boundary)\n        if (visited[n]) return visited[n];\n        // record current answer(number of unique child trees)\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            // for each child node, get number of unique tress it can have\n            ans += dp(i) * dp(n - i - 1);\n        }\n        return visited[n] = ans;\n    }\n};\n")),(0,a.kt)("p",null,"Runtime: ",(0,a.kt)("strong",{parentName:"p"},"0 ms, 100%"),"\nMemory Usage: ",(0,a.kt)("strong",{parentName:"p"},"6.2 MB, 6.12%")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"\u4f18\u5316"},"\u4f18\u5316"),(0,a.kt)("p",null,"\u7528\u4e00\u4e2a\u6570\u7ec4\u50a8\u5b58",(0,a.kt)("inlineCode",{parentName:"p"},"dp(i)"),"\u7684\u503c\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int numTrees(int n) {\n    vector<int> dp(n + 1, 0);\n    dp[0]=1; \n    dp[1]=1; \n    for(int i=2;i<=n;i++){\n        int left=0;\n        int right=i-1;\n        while(left<=i-1){\n            dp[i]+= dp[left]*dp[right];\n            left++;\n            right--;\n        }\n    }\n    return dp[n];\n}\n")),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"\u53cc\u6307\u9488")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"\u8fd9\u91cc\u7528\u53cc\u6307\u9488\u6765\u8bb0\u5f55\u5f53\u524d\u4f4d\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7b2c\u4e00\u79cd\u89e3\u6cd5\u91cc\u7684\u5355\u6307\u9488 (",(0,a.kt)("inlineCode",{parentName:"p"},"dp[i] += dp[i] + dp[n - i - 1]"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," is current index of ",(0,a.kt)("inlineCode",{parentName:"p"},"dp"),")"))),(0,a.kt)("br",null),(0,a.kt)("p",null,"\u5355\u6307\u9488\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int numTrees(int n) {\n    vector<int> dp(n + 1, 0);\n    dp[0]=1; \n    dp[1]=1; \n    for(int i=2;i<=n;i++){\n        int cur = 0;\n        while(cur < i){\n            dp[i] += dp[cur] * dp[i - cur - 1];\n            cur++;\n        }\n    }\n    return dp[n];\n}\n")),(0,a.kt)("p",null,"Runtime: ",(0,a.kt)("strong",{parentName:"p"},"0 ms, 100%"),"\nMemory Usage: ",(0,a.kt)("strong",{parentName:"p"},"6 MB, 21.53 %")),(0,a.kt)("br",null),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Emmm \u4e3a\u4ec0\u4e48\u5185\u5b58\u6ca1\u6709\u88ab\u4f18\u5316\u591a\u5c11\u5462:\u2753")))}m.isMDXComponent=!0}}]);
(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[70],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return N}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(n),N=l,k=d["".concat(s,".").concat(N)]||d[N]||u[N]||i;return n?a.createElement(k,r(r({ref:t},m),{},{components:n})):a.createElement(k,r({ref:t},m))}));function N(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8327:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var a=n(2122),l=n(9756),i=(n(7294),n(3905)),r=["components"],o={sidebar_position:2,id:"sqlnorm",title:"Normalization"},s={unversionedId:"SQL Notes/sqlnorm",id:"SQL Notes/sqlnorm",isDocsHomePage:!1,title:"Normalization",description:"Notion Notes",source:"@site/docs/SQL Notes/Normalization.md",sourceDirName:"SQL Notes",slug:"/SQL Notes/sqlnorm",permalink:"/docs/SQL Notes/sqlnorm",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/SQL Notes/Normalization.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"sqlnorm",title:"Normalization"},sidebar:"tutorialSidebar",previous:{title:"SQL",permalink:"/docs/SQL Notes/sqlintro"},next:{title:"\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217",permalink:"/docs/Dynamic Programming/\u6700\u957f\u5b50\u5e8f\u5217"}},p=[{value:"What is a good relation design?",id:"what-is-a-good-relation-design",children:[]},{value:"Normalization",id:"normalization",children:[{value:"Example: Relation TA",id:"example-relation-ta",children:[]}]},{value:"First Normal Form\uff081NF\uff09",id:"first-normal-form\uff081nf\uff09",children:[{value:"Example: Relation COURSE_CONTENT",id:"example-relation-course_content",children:[]},{value:"Example: Decomposing A Relation Into First Normal Form(1NF)",id:"example-decomposing-a-relation-into-first-normal-form1nf",children:[]}]},{value:"Decompose Into 1NF",id:"decompose-into-1nf",children:[{value:"Example: COURSE_CONTENT_3",id:"example-course_content_3",children:[]}]},{value:"Second Normal Form (2NF)",id:"second-normal-form-2nf",children:[{value:"Non-prime attribute",id:"non-prime-attribute",children:[]},{value:"\u2728 Functionally dependent",id:"-functionally-dependent",children:[]},{value:"Proper subset",id:"proper-subset",children:[]},{value:"Example: Functional Dependencies (FD&#39;s)",id:"example-functional-dependencies-fds",children:[]},{value:"Example: 2NF Relation SCHOOL",id:"example-2nf-relation-school",children:[]},{value:"Summary of examples so far",id:"summary-of-examples-so-far",children:[]}]},{value:"Decomposing a relation to conform with 2NF rules",id:"decomposing-a-relation-to-conform-with-2nf-rules",children:[]},{value:"Example: Relation TA Continued",id:"example-relation-ta-continued",children:[{value:"Normalize the TA relation to comply with 2NF",id:"normalize-the-ta-relation-to-comply-with-2nf",children:[]},{value:"UPDATE ANOMALY",id:"update-anomaly",children:[]},{value:"INSERT ANOMALY",id:"insert-anomaly",children:[]},{value:"DELETE ANOMALY",id:"delete-anomaly",children:[]}]},{value:"Transitive Functional Dependencies",id:"transitive-functional-dependencies",children:[{value:"A simple example of 3NF",id:"a-simple-example-of-3nf",children:[]}]},{value:"Decompose A Relation To Conform With 3NF",id:"decompose-a-relation-to-conform-with-3nf",children:[{value:"Example continued",id:"example-continued",children:[]},{value:"Summary:",id:"summary",children:[]},{value:"Why is this better?",id:"why-is-this-better",children:[]}]},{value:"Boyce-Codd NF, 4NF, 5NF, Domain-key NF",id:"boyce-codd-nf-4nf-5nf-domain-key-nf",children:[]}],m={toc:p};function u(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.notion.so/lavendershuo/Lecture-18-Normalization-03a84694d3a64e54a5c0622ae4332bac"},"Notion Notes")),(0,i.kt)("h2",{id:"what-is-a-good-relation-design"},"What is a good relation design?"),(0,i.kt)("p",null,"We have seen how to create a new relation from a given schema."),(0,i.kt)("p",null,"We know that the following ",(0,i.kt)("strong",{parentName:"p"},"rules")," must apply to relations:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Entity Integrity:\nFor each tuple in a relation attributes that belong to the ",(0,i.kt)("strong",{parentName:"li"},"primary")," key must be ",(0,i.kt)("strong",{parentName:"li"},"non-null")),(0,i.kt)("li",{parentName:"ol"},"Referential Integrity:\nAll ",(0,i.kt)("strong",{parentName:"li"},"foreign")," key attribute values in a relation must be either ",(0,i.kt)("strong",{parentName:"li"},"null")," or correspond to a ",(0,i.kt)("strong",{parentName:"li"},"primary")," key value"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Duplication")," of tuples in a relation is ",(0,i.kt)("strong",{parentName:"li"},"not")," allowed."),(0,i.kt)("li",{parentName:"ol"},"Next, we look at: - ",(0,i.kt)("strong",{parentName:"li"},"Normalization"))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"normalization"},"Normalization"),(0,i.kt)("p",null,"Normalization is ",(0,i.kt)("strong",{parentName:"p"},"a technique used to organize the data")," in a database."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Normalization consists of ",(0,i.kt)("strong",{parentName:"li"},"a set of rules")," that all relations must follow for a database(DB) to be well structured."),(0,i.kt)("li",{parentName:"ul"},"These ",(0,i.kt)("strong",{parentName:"li"},"rules")," are presented as sets of restrictions called ",(0,i.kt)("strong",{parentName:"li"},"NORMAL FORMS")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"NORMALIZATION")," is the ",(0,i.kt)("strong",{parentName:"li"},"process")," of creating a DB that complies with these ",(0,i.kt)("strong",{parentName:"li"},"restrictions"),". We do that by normalizing each of the relations."),(0,i.kt)("li",{parentName:"ul"},"Normal forms",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"1NF (First Normal Form)"),(0,i.kt)("li",{parentName:"ul"},"2NF (Second Normal Form)"),(0,i.kt)("li",{parentName:"ul"},"3NF (Third Normal Form)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("del",{parentName:"li"},"4NF, 5NF, 6NF......")," It's not always a good idea to normalize beyond 3NF.")))),(0,i.kt)("p",null,"Applying these rules ",(0,i.kt)("strong",{parentName:"p"},"removes undesirable properties")," from a DB, including the ",(0,i.kt)("strong",{parentName:"p"},"removal of data anomalies"),":\n",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE ANOMALY"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERTION ANOMALY"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DELETION ANOMAL")),(0,i.kt)("h3",{id:"example-relation-ta"},"Example: Relation TA"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/96b8f42d-7d39-4836-9f6c-1c9a2f7c9901/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210602%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210602T222836Z&X-Amz-Expires=86400&X-Amz-Signature=7a6411e633bb3651bd7d344d5412e98b28a8590e9b7010a0713b52b0655be82c&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22",alt:"TA Relation"})),(0,i.kt)("p",null,"The relation TA is not normalized. Why does this matter?"),(0,i.kt)("p",null,"What are the CANDIDATE KEYS of TA?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"{TA_ID, TA_DEPT}")),(0,i.kt)("p",null,"What is the PRIMARY KEY of TA?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"{TA_ID, TA_DEPT}")),(0,i.kt)("div",{style:{color:"tomato"}},(0,i.kt)("h4",null,"UPDATE ANOMALY")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Ann belongs to ",(0,i.kt)("strong",{parentName:"li"},"two departments")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"If Ann's address changes, we will need to update two tuples, to avoid ambiguity"))),(0,i.kt)("div",{style:{color:"tomato"}},(0,i.kt)("h4",null,"INSERTION ANOMALY")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Suppose a new TA has been appointed but does not yet know which department they will work in."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"We cannot put a ",(0,i.kt)("inlineCode",{parentName:"strong"},"NULL")," to ",(0,i.kt)("inlineCode",{parentName:"strong"},"TA_DEPT")," because primary key value cannot be NULL.")))),(0,i.kt)("li",{parentName:"ul"},"We would ",(0,i.kt)("strong",{parentName:"li"},"not be able to INSERT")," the data into the relation. \u2014 INSERTION ANOMALY")),(0,i.kt)("div",{style:{color:"tomato"}},(0,i.kt)("h4",null,"DELETION ANOMALY")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Suppose the BIOLOGY department is closed down")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Deleting tuples with attribute value BIOLOGY in TA_DEPT would delete the information about Bob")," \u2014 we ",(0,i.kt)("strong",{parentName:"li"},"do not want to remove Bob"),"'s TA_ID, TA_ADDRESS, and other information \u2014 thus a DELETION ANOMALY")),(0,i.kt)("div",{style:{color:"white"}},(0,i.kt)("h4",null,"How do we resolve or avoid anomalies?")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To resolve or avoid anomalies, we need to ",(0,i.kt)("em",{parentName:"li"},"normalize")," relations"),(0,i.kt)("li",{parentName:"ul"},"We will continue the above example later in the lecture, after we have discussed 1NF and 2NF.")),(0,i.kt)("hr",null),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h1",{parentName:"li",id:"normal-forms"},"Normal Forms"))),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Normalization consists of a set of rules that all relations must follow for a database(DB) to be well structured.\nThese rules are presented as sets of restrictions called NORMAL FORMS.")),(0,i.kt)("h2",{id:"first-normal-form\uff081nf\uff09"},"First Normal Form\uff081NF\uff09"),(0,i.kt)("p",null,"Each attribute ",(0,i.kt)("strong",{parentName:"p"},"name")," must consist of a ",(0,i.kt)("strong",{parentName:"p"},"single")," ",(0,i.kt)("strong",{parentName:"p"},"item"),"."),(0,i.kt)("p",null,"Each attribute ",(0,i.kt)("strong",{parentName:"p"},"value")," must represent a ",(0,i.kt)("strong",{parentName:"p"},"single")," ",(0,i.kt)("strong",{parentName:"p"},"fact"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/04723470-f753-4b63-b1ec-ad2ac4d82ab7/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210602%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210602T230417Z&X-Amz-Expires=86400&X-Amz-Signature=eb58891e019b88bfd22cc5fe3c5f431dab529d1c5a1f3e90d3465c5f32a3620f&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22",alt:"Course_Content"})),(0,i.kt)("p",null,"A single fact:"),(0,i.kt)("p",null,"Anne is a single fact regarding FirstName; PSTAT 10 is a single fact regarding Course#......"),(0,i.kt)("h3",{id:"example-relation-course_content"},"Example: Relation COURSE_CONTENT"),(0,i.kt)("p",null,"A DB design team has been working on the relationships between each COURSE and its SYLLABUS in the Statistics Department. They suggest the following relation."),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/18ef94d7-53c7-49cd-b0b3-7b703db5cad3/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210602%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210602T230510Z&X-Amz-Expires=86400&X-Amz-Signature=470a04f371263f5fab6ca21491075614644079d3708ef1c205674d3f14d044cd&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22",alt:"Lecture%2018%20Normalization%207b2eae7c64944ebd929ecebffb209517/Untitled%202.png"})),(0,i.kt)("p",null,"COURSE #: PSTAT10, PSTAT126 \u2014\u2014 OK"),(0,i.kt)("p",null,"SYLLABUS: R,SQL Regression, R \u2014\u2014 ",(0,i.kt)("strong",{parentName:"p"},"two")," separate facts"),(0,i.kt)("p",null,"Thus COURSE_CONTENT Not in 1NE"),(0,i.kt)("h3",{id:"example-decomposing-a-relation-into-first-normal-form1nf"},"Example: Decomposing A Relation Into First Normal Form(1NF)"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://tva1.sinaimg.cn/large/008i3skNgy1gqwy8n6mhpj30ju0eomzh.jpg",alt:"https://tva1.sinaimg.cn/large/008i3skNgy1gqwy8n6mhpj30ju0eomzh.jpg"})),(0,i.kt)("p",null,"R, SQL for PSTAT10 become ",(0,i.kt)("strong",{parentName:"p"},"separate")," ",(0,i.kt)("strong",{parentName:"p"},"tuples"),"."),(0,i.kt)("p",null,"So COURSE_CONTENT2 is in 1NF"),(0,i.kt)("p",null,"A new example:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://tva1.sinaimg.cn/large/008i3skNgy1gqwyb874nej30gu0ds0uu.jpg",alt:"https://tva1.sinaimg.cn/large/008i3skNgy1gqwyb874nej30gu0ds0uu.jpg"})),(0,i.kt)("p",null,"It violates both rules for 1NF"),(0,i.kt)("h2",{id:"decompose-into-1nf"},"Decompose Into 1NF"),(0,i.kt)("h3",{id:"example-course_content_3"},"Example: COURSE_CONTENT_3"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://tva1.sinaimg.cn/large/008i3skNgy1gqwyd8q7qrj30lc0aywgk.jpg",alt:"COURSE_CONTENT_3"})),(0,i.kt)("p",null,"Not in 1NF"),(0,i.kt)("p",null,"Because there 2 tuple values in COURSE_CONTENT"),(0,i.kt)("p",null,"We can decompose it:"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://tva1.sinaimg.cn/large/008i3skNgy1gqwyep49exj30nc0ekgo4.jpg",alt:"COURSE_CONTENT_4"})),(0,i.kt)("p",null,"In 1NF"),(0,i.kt)("h2",{id:"second-normal-form-2nf"},"Second Normal Form (2NF)"),(0,i.kt)("p",null,"A relation is in 2NF if both of the following conditions hold:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It is in ",(0,i.kt)("strong",{parentName:"li"},"1NF")," (first normal form)."),(0,i.kt)("li",{parentName:"ul"},"No non-prime attribute is functionally dependent on a proper subset of any candidate key.")),(0,i.kt)("h3",{id:"non-prime-attribute"},"Non-prime attribute"),(0,i.kt)("p",null,"An attribute that is ",(0,i.kt)("strong",{parentName:"p"},"not part of any candidate key")," is a NON-PRIME ATTRIBUTE."),(0,i.kt)("h3",{id:"-functionally-dependent"},"\u2728 Functionally dependent"),(0,i.kt)("p",null,"If a set of attributes A of a relation ",(0,i.kt)("strong",{parentName:"p"},"uniquely identifies")," a set of attributes B of the same relation, then ",(0,i.kt)("strong",{parentName:"p"},"B is FUNCTIONALLY DEPENDENT on A"),".\nWritten: ",(0,i.kt)("inlineCode",{parentName:"p"},"A--\x3eB")," (just one long arrow)"),(0,i.kt)("h3",{id:"proper-subset"},"Proper subset"),(0,i.kt)("p",null,"A proper subset of a set A is a subset of A that is not equal to A."),(0,i.kt)("h3",{id:"example-functional-dependencies-fds"},"Example: Functional Dependencies (FD's)"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"If a set of attributes A of are relation uniquely identifies a set of attributes B of the same relation, then B is FUNCTIONALLY DEPENDENT on A. Written:A---\x3eB")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"STUDENT (ID, NAME, ADDRESS)")),(0,i.kt)("p",null,"{lD} uniquely identifies the following sets of attributes {NAME}, {ADDRESS}, {NAME, ADDRESS}"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"If {ID} uniquely identifies {NAME, ADDRESS}, then it also uniquely identifies {NAME} and {ADDRESS}."))),(0,i.kt)("p",null,"NAME and ADDRESS are both FUNCTIONALLY DEPENDENT on ID. Written:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"{ID}---\x3e{NAME}"),(0,i.kt)("li",{parentName:"ul"},"{ID}---\x3e{ADDRESS}"),(0,i.kt)("li",{parentName:"ul"},"{ID}---\x3e{NAME, ADDRESS}")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(Not required to use {}, just be absolutely clear about what you're meaning)")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Theory of relational database replies on advanced set theory. It's mathematically precise and consistent. If you do more work in database, you will need to understand quite a lot of set theory before you can continue.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Continued"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ID---\x3e{NAME} (read: ",(0,i.kt)("strong",{parentName:"li"},"NAME is functionally dependent on ID"),")"),(0,i.kt)("li",{parentName:"ul"},"ID---\x3e{ADDRESS}"),(0,i.kt)("li",{parentName:"ul"},"ID---\x3e{NAME, ADDRESS}")),(0,i.kt)("p",null,"ID---\x3e{NAME} can therefore also be read: ",(0,i.kt)("strong",{parentName:"p"},"ID functionally determines NAME")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You should be familiar with both of these terms with both functionally dependent and functionally determines."),(0,i.kt)("li",{parentName:"ul"},"MEANING:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For any given ID, there can only be one name. Similarly, for address."))),(0,i.kt)("li",{parentName:"ul"},"However, it would be ",(0,i.kt)("strong",{parentName:"li"},"incorrect to write NAME--\x3e{ID}"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"MEANING:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For any given NAME, ",(0,i.kt)("strong",{parentName:"li"},"there can only be one ID")," \u2014\u2014 not the case"),(0,i.kt)("li",{parentName:"ul"},"NAME functionally determines ID and ID is functionally determined by NAME")))))),(0,i.kt)("h3",{id:"example-2nf-relation-school"},"Example: 2NF Relation SCHOOL"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://tva1.sinaimg.cn/large/008i3skNly1gqwz1p38r2j30j60bmmz4.jpg",alt:"SCHOOL"})),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Is the relation SCHOOL in 1NF?"),(0,i.kt)("p",{parentName:"li"},"YES")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Are there any ",(0,i.kt)("strong",{parentName:"p"},"non-prime attributes that are functionally dependent on a proper subset of any candidate key"),"?"),(0,i.kt)("p",{parentName:"li"},"If so, the relation is ",(0,i.kt)("strong",{parentName:"p"},"not")," in 2NF."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Candidate key: ",(0,i.kt)("strong",{parentName:"p"},"{FACULTY_ID, CLASS}"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Proper subsets of candidate keys: {FACULTY_ID},{CLASS}")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Non-Prime attributes: {FACULTY",(0,i.kt)("em",{parentName:"p"},"AGE}\n(","_","An attribute that is not part of any candidate key is a non-prime attribute"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Identify Functional Dependencies (FD's) associated with non-prime attributes.")),(0,i.kt)("p",{parentName:"li"},"Does ",(0,i.kt)("strong",{parentName:"p"},"FACULTY_ID---\x3e FACULTY_AGE")," hold? YES.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Non-prime attribute FACULTY_AGE is ",(0,i.kt)("strong",{parentName:"p"},"dependent")," on FACULY_ID which is a proper subset of the candidate key."))))),(0,i.kt)("p",null,"Therefore, the relation SCHOOL is ",(0,i.kt)("strong",{parentName:"p"},"not")," in 2NF."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(Pause to make sure you understand these steps)")),(0,i.kt)("p",null,"Why does whether the relation is 2NF or not ",(0,i.kt)("strong",{parentName:"p"},"matters"),"?"),(0,i.kt)("p",null,"Because there are possibility of ",(0,i.kt)("strong",{parentName:"p"},"Update anomalies, Insertion anomalies and Deletion anomalies"),"."),(0,i.kt)("p",null,"Try to think of some possible anomalies."),(0,i.kt)("h3",{id:"summary-of-examples-so-far"},"Summary of examples so far"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Is the SCHOOL below in 1NF? \u2014\u2014 YES")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Candidate key: {FACULTY_ID, CLASS} and hence Primary Key Non-Prime attributes: FACULTY_AGE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Relation not in 2NF")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The non-prime attribute FACULTY_AGE is functionally dependent on FACULTY_ID."),(0,i.kt)("p",{parentName:"li"},"This violates 2NF which requires that:"),(0,i.kt)("p",{parentName:"li"},"No non-prime attribute is ",(0,i.kt)("strong",{parentName:"p"},"functionally dependent")," on a proper subset of any candidate key."))),(0,i.kt)("h1",{id:"decompose-a-relation"},"Decompose A Relation"),(0,i.kt)("h2",{id:"decomposing-a-relation-to-conform-with-2nf-rules"},"Decomposing a relation to conform with 2NF rules"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Steps"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"When there is an FD, X--\x3eY on part of the candidate key(X is part of candidate key), ",(0,i.kt)("strong",{parentName:"li"},"form a new relation")," with ",(0,i.kt)("strong",{parentName:"li"},"X as primary key")," and with ",(0,i.kt)("strong",{parentName:"li"},"all the attributes determined by X.")),(0,i.kt)("li",{parentName:"ol"},"Form a new relation defined on the attributes of the ",(0,i.kt)("strong",{parentName:"li"},"candidate keys")," of the original relation and include ",(0,i.kt)("strong",{parentName:"li"},"all attributes that are not functionally determined by only part of the key"),".")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example(continued):")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The candidate key is:{FACULTY_ID, CLASS}")),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://tva1.sinaimg.cn/large/008i3skNly1gqwz1p38r2j30j60bmmz4.jpg",alt:"https://tva1.sinaimg.cn/large/008i3skNly1gqwz1p38r2j30j60bmmz4.jpg"})),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Applying the steps to the SCHOOL relation"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"STEP 1")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"FACULTY",(0,i.kt)("em",{parentName:"li"},"ID ---\x3e FACULTY_AGE "),"(READ: FACULTY",(0,i.kt)("em",{parentName:"li"},"ID functionally determines FACULTY_AGE)")),(0,i.kt)("li",{parentName:"ul"},"Form a new relation with FACULTY_ID as primary key and FACULTY_AGE as attribute")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{parentName:"p",src:"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/73f2fe72-5810-47bd-9afd-308aaecb36df/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210602%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210602T230712Z&X-Amz-Expires=86400&X-Amz-Signature=98ebacdf8fc66b4f7fd78e5a3e3f50953ad212bf8ce381d2f253e12932d6ba96&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22",alt:"SCHOOL_2"}))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"STEP 2")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Form a new relation defined on the attributes of the key of the original relation. New relation has FACULTY_ID, CLASS as attributes."),(0,i.kt)("li",{parentName:"ul"},"FACULTY_AGE is determined by only part of the key, so is not included.")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{parentName:"p",src:"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/e39d4264-9108-4a52-841d-2c51fbe55c26/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210602%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210602T230746Z&X-Amz-Expires=86400&X-Amz-Signature=11c855357f161933221632ba3fd464f00ace8d4569131baf816eb45dc8dae3c4&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22",alt:"SCHOOL_3"})))))),(0,i.kt)("h2",{id:"example-relation-ta-continued"},"Example: Relation TA Continued"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/96b8f42d-7d39-4836-9f6c-1c9a2f7c9901/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210602%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210602T222836Z&X-Amz-Expires=86400&X-Amz-Signature=7a6411e633bb3651bd7d344d5412e98b28a8590e9b7010a0713b52b0655be82c&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22",alt:"TA Relation"})),(0,i.kt)("h3",{id:"normalize-the-ta-relation-to-comply-with-2nf"},"Normalize the TA relation to comply with 2NF"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"TA is in 1NF")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Candidate key: {TA_ID, TA_DEPT}")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Non-prime attributes: {TA_NAME, TA_ADDRESS}")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Functional dependencies:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"TA_ID---\x3e{TA_NAME, TA_ADDRESS}"),(0,i.kt)("li",{parentName:"ol"},"TA_ID---\x3e{TA_NAME}"),(0,i.kt)("li",{parentName:"ol"},"TA_ID---\x3e{TA_ADDRESS}"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Non-prime attributes functionally ",(0,i.kt)("strong",{parentName:"p"},"dependent")," on proper subset of candidate key, so TA ",(0,i.kt)("strong",{parentName:"p"},"not")," in 2NF")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"So we need to ",(0,i.kt)("strong",{parentName:"p"},"decompose")," it into 2NF:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Step 1: When there is an FD, X--\x3eY on part of the candidate key, ",(0,i.kt)("strong",{parentName:"p"},"form a new relation")," with ",(0,i.kt)("strong",{parentName:"p"},"X as primary key")," and with ",(0,i.kt)("strong",{parentName:"p"},"all the attributes determined by X.")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"FD: TA_ID---\x3e{TA_NAME} and TA_ID---\x3e{TA_ADDRESS}"),(0,i.kt)("li",{parentName:"ul"},"Candidate keys: {TA_ID, TA_DEPT}"),(0,i.kt)("li",{parentName:"ul"},"Form a new relation with TA_ID as primary key and TA_NAME and TA_ADDRESS as attributes")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{parentName:"p",src:"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/002a62db-f55f-45ea-a8c9-e1c5b97ee3c3/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210602%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210602T230931Z&X-Amz-Expires=86400&X-Amz-Signature=d305d70a157d19ec9b3f9672e0899749975fabed33bc3a2da5319e6118503471&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22",alt:"TA2"})),(0,i.kt)("p",{parentName:"li"},"Duplicate tuples removed because of primary key in new relation")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Step 2: ",(0,i.kt)("em",{parentName:"p"},"Form a new relation defined on the attributes of the ",(0,i.kt)("strong",{parentName:"em"},"candidate keys")," of the original relation and include ",(0,i.kt)("strong",{parentName:"em"},"all attributes that are not functionally determined by only part of the key"),".")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Candidate keys: {TA_ID, TA_DEPT}"),(0,i.kt)("li",{parentName:"ul"},"{TA_NAME} and {TA_ADDRESS} are functionally determined by TA_ID, which is part of the key \u2014\u2014 so are not included in the new relation attributes"),(0,i.kt)("li",{parentName:"ul"},"New relation attributes: {TA_ID}, {TA_DEPT}")),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("img",{parentName:"p",src:"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/9e56f63f-b919-4324-9c60-2524bbef6e7d/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAT73L2G45O3KS52Y5%2F20210602%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210602T231004Z&X-Amz-Expires=86400&X-Amz-Signature=fa0531dd8cec713b58fbec73908ded50fb5ecdee1b40208652a223c155327db3&X-Amz-SignedHeaders=host&response-content-disposition=filename%20%3D%22Untitled.png%22",alt:"TA3"})))))),(0,i.kt)("h3",{id:"update-anomaly"},"UPDATE ANOMALY"),(0,i.kt)("p",null,"Ann belongs to two departments. If Ann's ",(0,i.kt)("strong",{parentName:"p"},"address changes"),", we will need to update TWO tuples to avoid ambiguity."),(0,i.kt)("p",null,"Ann's address might be updated in MATH but not in STATS; an inconsistency."),(0,i.kt)("p",null,"Have we ",(0,i.kt)("strong",{parentName:"p"},"resolved the update anomaly"),"?"),(0,i.kt)("p",null,"Yes. We only need update ONE tuple. \u2014\u2014 ",(0,i.kt)("strong",{parentName:"p"},"update the first tuple in TA2")),(0,i.kt)("h3",{id:"insert-anomaly"},"INSERT ANOMALY"),(0,i.kt)("p",null,"Suppose a new TA has been appointed but does not yet know which department they will work in."),(0,i.kt)("p",null,"Have we ",(0,i.kt)("strong",{parentName:"p"},"resolve the INSERT anomaly"),"?"),(0,i.kt)("p",null,"Yes. We can record the new TA's details without having to specify their department."),(0,i.kt)("h3",{id:"delete-anomaly"},"DELETE ANOMALY"),(0,i.kt)("p",null,"Suppose the BIOLOGY department is closed down."),(0,i.kt)("p",null,"Deleting tuples with attribute value BIOLOGY in TA_DEPT would delete the information about Bob."),(0,i.kt)("p",null,"Have we ",(0,i.kt)("strong",{parentName:"p"},"resolve the DELETE anomaly"),"?"),(0,i.kt)("p",null,"Yes. We can delete biology department without deleting Bob's information."),(0,i.kt)("hr",null),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.notion.so/lavendershuo/Lecture-19-3NF-and-R-Review-882ec061fa174f63a7b50cf241ea3b29"},"3NF Lecture Notes")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"3NF quickly beyonds the scope of PSTAT10. All we need to know is the content mentioned in the powerpoint slides.")),(0,i.kt)("h1",{id:"third-normal-3nf"},"Third Normal 3NF"),(0,i.kt)("p",null,"A relation is in 3NF if both of the following conditions hold:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"the relation is in ",(0,i.kt)("strong",{parentName:"li"},"2NF"),"."),(0,i.kt)("li",{parentName:"ol"},"there are no ",(0,i.kt)("strong",{parentName:"li"},"TRANSITIVE FUNCTIONAL DEPENDENCIES")," of NON-PRIME ATTRIBUTES on the primary key.")),(0,i.kt)("h2",{id:"transitive-functional-dependencies"},"Transitive Functional Dependencies"),(0,i.kt)("p",null,"If ",(0,i.kt)("strong",{parentName:"p"},"A---\x3eB")," and ",(0,i.kt)("strong",{parentName:"p"},"B---\x3eC")," are two Functional Dependencies, then ",(0,i.kt)("strong",{parentName:"p"},"A---\x3eC")," is a TRANSITIVE FUNCTIONAL DEPENDENCY."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Recall:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"If a set of attributes A of a relation uniquely identifies a set of attributes B of the same relation, then B is ",(0,i.kt)("strong",{parentName:"em"},"FUNCTIONALLY DEPENDENT")," on A. Written: A ---\x3e B")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"An attribute that is not part of any candidate key is a ",(0,i.kt)("strong",{parentName:"em"},"NON-PRIME ATTRIBUTE"),"."))),(0,i.kt)("h3",{id:"a-simple-example-of-3nf"},"A simple example of 3NF"),(0,i.kt)("p",null,"Consider the following relation schema: Student_Address (STUDENT_ID, STUDENT_NAME, ZIP, STATE, CITY)"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"It's always important to state your assumptions")),(0,i.kt)("p",null,"Assumptions: Each student has a unique STUDENT_ID and only one address, denoted by ZIP, STATE, CITY"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Review for these concepts:")),(0,i.kt)("p",null,"Super-keys: {STUDENT_ID}, {STUDENT_ID, STUDENT_NAME} and so on\u2026"),(0,i.kt)("p",null,"Candidate keys: {STUDENT_ID}"),(0,i.kt)("p",null,"Primary key: {STUDENT_ID}"),(0,i.kt)("p",null,"Non-prime attributes: {STUDENT_NAME, ZIP, STATE, CITY}"),(0,i.kt)("p",null,"\u2192 \u26a0\ufe0f2NF holds. ",(0,i.kt)("em",{parentName:"p"},"Relation is in 1NF and no non-prime attribute is functionally dependent on a proper subset of any candidate key"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Stop the lecture and go through this carefully to make sure understand what's going on.")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("em",{parentName:"p"},"3NF will hold if there are no TRANSITIVE FUNCTIONAL DEPENDENCIES of NON-PRIME ATTRIBUTES on the primary key."))),(0,i.kt)("p",null,"ZIP is functionally dependent on STUDENT_ID."),(0,i.kt)("p",null,"STATE and CITY is functionally dependent on ZIP."),(0,i.kt)("p",null,"Thus,"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"STUDENT_ID \u2014> ZIP"),(0,i.kt)("li",{parentName:"ul"},"ZIP \u2014> {STATE, CITY}")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"If A \u2014> B and B \u2014> C are two FDs, then A \u2014> C is a transitive functional dependency.")),(0,i.kt)("p",null,"{STATE, CITY} is transitively functionally dependent on STUDENT_ID, STUDENT_ID \u2014> {STATE, CITY}"),(0,i.kt)("p",null,"STATE and CITY are non-prime attributes. STUDENT_ID is the primary key."),(0,i.kt)("p",null,"Thus, the relation STUDENT_ADDRESS violates third formal form requirements, not in 3NF."),(0,i.kt)("h2",{id:"decompose-a-relation-to-conform-with-3nf"},"Decompose A Relation To Conform With 3NF"),(0,i.kt)("h3",{id:"example-continued"},"Example continued"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Student_Address (STUDENT_ID, STUDENT_NAME, ZIP, STATE, CITY)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"STUDENT_ID \u2014> ZIP functional dependency")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"ZIP \u2014> {STATE, CITY} functional dependency")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"STUDENT_ID \u2014> {STATE, CITY} transitive functional dependency"))),(0,i.kt)("p",null,"In order to conform with 3NF, we need to remove that transitive functional dependency."),(0,i.kt)("p",null,"\u2192 Form a new relation that includes all attributes in the schema ",(0,i.kt)("strong",{parentName:"p"},"except those that were transitively determined"),"."),(0,i.kt)("p",null,"New relation schema: SA2 (STUDENT_ID, STUDENT_NAME, ZIP) (not include STATE, CITY)"),(0,i.kt)("p",null,"This leaves us with attributes STATE and CITY."),(0,i.kt)("p",null,"\u2192 Form a new relation defined on these attributes with ZIP as primary key, since ZIP \u2014> {STATE, CITY}"),(0,i.kt)("p",null,"New relation schema: SA3 (ZIP, STATE, CITY)"),(0,i.kt)("h3",{id:"summary"},"Summary:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"FDs:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"STUDENT_ID ---\x3eZIP functionally dependency"),(0,i.kt)("li",{parentName:"ul"},"ZIP ---\x3e STATE, CITY functionally dependency"),(0,i.kt)("li",{parentName:"ul"},"STUDENT_ID ---\x3e STATE, CITY transitive functional dependency"))),(0,i.kt)("li",{parentName:"ul"},"Schema of original relation:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Student_Address (STUDENT_ID, STUDENT_NAME, ZIP, STATE, CITY)"))),(0,i.kt)("li",{parentName:"ul"},"Schema of new relations:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Student_Address2 <STUDENT_ID, STUDENT_NAME, ZIP>"),(0,i.kt)("li",{parentName:"ul"},"Student_Address3 <ZIP, STATE, CITY>")))),(0,i.kt)("h3",{id:"why-is-this-better"},"Why is this better?"),(0,i.kt)("p",null,"You should look at potential anomalies:\n",(0,i.kt)("inlineCode",{parentName:"p"},"UPDATE ANOMALY"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERTION ANOMALY"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DELETION ANOMAL")),(0,i.kt)("p",null,"Once you constructed the relation, ZIP, STATE, and CITY will not change."),(0,i.kt)("p",null,"If the student changes its address, we only need to update ZIP."),(0,i.kt)("p",null,"That's no problem, becuase the new ZIP is already a part of Student_Address3."),(0,i.kt)("h2",{id:"boyce-codd-nf-4nf-5nf-domain-key-nf"},"Boyce-Codd NF, 4NF, 5NF, Domain-key NF"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"There are other normal forms, each stricter than the one preceding it."),(0,i.kt)("li",{parentName:"ul"},"We do not test on them.")),(0,i.kt)("hr",null))}u.isMDXComponent=!0}}]);
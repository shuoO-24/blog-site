(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3189],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return d},kt:function(){return s}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),m=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=m(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=m(t),s=i,g=c["".concat(p,".").concat(s)]||c[s]||u[s]||o;return t?r.createElement(g,a(a({ref:n},d),{},{components:t})):r.createElement(g,a({ref:n},d))}));function s(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=c;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var m=2;m<o;m++)a[m]=t[m];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1164:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var r=t(2122),i=t(9756),o=(t(7294),t(3905)),a=["components"],l={sidebar_position:2,id:"LeetCode64",title:"64. Minimum Path Sum \u2014 Medium"},p={unversionedId:"Dynamic Programming/LeetCode64",id:"Dynamic Programming/LeetCode64",isDocsHomePage:!1,title:"64. Minimum Path Sum \u2014 Medium",description:"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.",source:"@site/docs/Dynamic Programming/Minimum Path Sum.md",sourceDirName:"Dynamic Programming",slug:"/Dynamic Programming/LeetCode64",permalink:"/docs/Dynamic Programming/LeetCode64",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/Dynamic Programming/Minimum Path Sum.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"LeetCode64",title:"64. Minimum Path Sum \u2014 Medium"},sidebar:"tutorialSidebar",previous:{title:"\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217",permalink:"/docs/Dynamic Programming/LeetCode300"},next:{title:"Basic Syntax",permalink:"/docs/Docusaurus_References/Markdown Basics"}},m=[{value:"\u601d\u8def",id:"\u601d\u8def",children:[{value:"&quot;Bottom Up&quot;",id:"bottom-up",children:[]},{value:"Debug",id:"debug",children:[]}]}],d={toc:m};function u(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Given a ",(0,o.kt)("inlineCode",{parentName:"p"},"m x n")," ",(0,o.kt)("inlineCode",{parentName:"p"},"grid")," filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," You can only move either down or right at any point in time."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 1:")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Input: grid = [[1,2,3],[4,5,6]]\nOutput: 12\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Constraints:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"m == grid.length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"n == grid[i].length")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"1 <= m, n <= 200")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"0 <= grid[i][j] <= 100"))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"\u601d\u8def"},"\u601d\u8def"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"dp[m][n]"),"\u8bb0\u5f55\u5230\u8fbe\u5f53\u524d\u683c\u5b50\u65f6\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5c0f\u503c\uff1b"),(0,o.kt)("h3",{id:"bottom-up"},'"Bottom Up"'),(0,o.kt)("p",null,"\u26a0\ufe0f \u4e0d\u53ef\u4ee5fill ",(0,o.kt)("inlineCode",{parentName:"p"},"dp")," with grid values\uff01\u2014\u2014 \u8981\u4e0d",(0,o.kt)("inlineCode",{parentName:"p"},"dp[m][n]"),"\u6c38\u8fdc\u90fd\u4f1a\u7b49\u4e8e\u683c\u5b50\u672c\u8eab\u7684\u503c"),(0,o.kt)("p",null,"for\u5faa\u73af\u4f9d\u6b21\u904d\u5386vector\uff0c\u4ece\u7b2c\u4e00\u4e2a\u683c\u5b50\u5f00\u59cb\uff0c",(0,o.kt)("strong",{parentName:"p"},"\u4f9d\u6b21\u786e\u5b9a\u4e0b\u4e00\u6b65\u7684\u65b9\u5411"),"\u3002"),(0,o.kt)("p",null,"\u8fd9\u4e00\u9898\u66f4\u9002\u5408\u7528\u300c\u81ea\u9876\u5411\u4e0b\u300d\u601d\u8def\u8003\u8651\u6bcf\u4e2a\u683c\u5b50\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"dp[m][n]"),"\u7684\u7531\u6765\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u683c\u5b50\u6765\u8bf4\uff0c\u8981\u60f3\u5728\u4e0b\u4e00\u6b65\u4fdd\u6301\u548c\u6700\u5c0f\uff0c\u8981\u4e48\u5f80\u4e0b\uff0c\u4e0e\u4e0b\u9762\u7684\u683c\u5b50\u76f8\u52a0\uff0c\u8981\u4e48\u5f80\u53f3\uff0c\u4e0e\u53f3\u8fb9\u7684\u683c\u5b50\u76f8\u52a0\uff1b"),(0,o.kt)("li",{parentName:"ul"},"\u6362\u53e5\u8bdd\u8bf4\uff0c\u8981\u60f3\u83b7\u5f97\u5f53\u524d\u683c\u5b50\u7684",(0,o.kt)("inlineCode",{parentName:"li"},"dp[m][n]"),"\uff0c\u6211\u4eec\u53ea\u80fd\u56de\u5934\u627e\u5b83\u7684\u4e0a\u4e00\u4e2a\u683c\u5b50\uff0c\u901a\u8fc7\u6bd4\u8f83\u786e\u5b9a\u5230\u5e95\u662f\u4e0a\u9762\u7684\u683c\u5b50\u8fd8\u662f\u5de6\u8fb9\u7684\u683c\u5b50\uff1b")),(0,o.kt)("p",null,"\u26a0\ufe0f \u6bcf\u4e2a\u683c\u5b50\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"dp[m][n]"),"\u53ea\u80fd\u901a\u8fc7\u4e0a\u4e00\u6b65\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"dp[m][n]"),"\u83b7\u5f97\uff08\u9664\u4e86\u8d77\u70b9\uff09"),(0,o.kt)("p",null,"\u6211\u4eec\u63a5\u4e0b\u6765\u53ef\u4ee5\u300c\u81ea\u5e95\u5411\u4e0a\u300d\uff0c\u7528\u8fd9\u4e2a\u601d\u8def\u4ece\u8d77\u70b9\u5f80\u524d\u63a8\u8fdb\uff0c\u786e\u5b9a\u4e0b\u4e00\u6b65\u8981\u8d70\u7684\u683c\u5b50\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"dp[m][n]"),"\u3002"),(0,o.kt)("p",null,"\u6240\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5bf9\u4e8e",(0,o.kt)("inlineCode",{parentName:"li"},"grid[m][n]"),"\uff1a",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dp[m + 1][n]\xa0= min(dp[m][n] + grid[m + 1][n], dp[m + 1][n])")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dp[m][n +\xa01]\xa0=\xa0min(dp[m][n] + grid[m][n + 1], dp[m][n + 1])"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"int minPathSum(vector<vector<int>>& grid) {\n        if(grid.size() == 0) return 0;\n        vector<vector<int>> dp(grid.size(), vector<int>(grid[0].size(), 0));\n        \n        for(int i = 0; i < grid[0].size(); i++) {\n            if(i == 0) dp[0][i] = grid[0][i];\n            else dp[0][i] = dp[0][i - 1] + grid[0][i];\n        }\n        for(int i = 1; i < grid.size(); i++) {\n            dp[i][0] = dp[i - 1][0] + grid[i][0];\n        }\n        for(int i = 1; i < dp.size(); i++) {\n            for(int j = 1; j < dp[0].size(); j++) {\n                dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n        return dp[dp.size() - 1][dp[0].size() -1];\n    }\n")),(0,o.kt)("p",null,"\u8fd0\u884c\u65f6\u95f4: 8 ms, 81.37% \u8fd0\u884c\u5185\u5b58\uff1a10.2 MB, 17.91% "),(0,o.kt)("h4",{id:"top-down"},'"Top Down"'),(0,o.kt)("p",null,"\u4ece\u540e\u5f80\u524d\u904d\u5386\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"m =\xa0grid.size()\xa0- 1"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"n\xa0= grid[0].size()\xa0- 1"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"for\xa0(int row = m; row >= 0; row--)")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"for\xa0(int col = n; col >= 0; col--)")," ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"\u5bf9\u4e8e\u8fb9\u754c\u503c\uff1a",(0,o.kt)("inlineCode",{parentName:"p"},"if\xa0(row == m)"),"\uff0c\u5230\u8fbe\u6700\u540e\u4e00\u884c\uff0c\u8981\u60f3\u524d\u8fdb\u53ea\u80fd\u6539\u53d8\u5217\u6570\uff0c\u6240\u4ee5\u662f",(0,o.kt)("inlineCode",{parentName:"p"},"dp[row][col] = dp[row][col + 1] + grid[row][col];"),"\uff0c\u5230\u8fbe\u6700\u540e\u4e00\u5217\u65f6\u540c\u7406"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"    int minPathSum(vector<vector<int>>& grid) {\n        int m = grid.size() - 1, n = grid[0].size() - 1;\n        int dp[200][200]; \n        \n        for (int row = m; row >= 0; row--){\n            for (int col = n; col >= 0; col--){\n                if (row == m && col == n) {\n                    // reach last cell\n                    dp[row][col] = grid[row][col];\n                    continue;\n                }\n                // initialize boundary cells -- only one path, just add up\n                if (row == m) {\n                    // last row\n                    dp[row][col] = dp[row][col + 1] + grid[row][col];\n                } \n                else if (col == n) {\n                    // last column\n                    dp[row][col] = dp[row + 1][col] + grid[row][col];\n                }\n                else{\n                    dp[row][col] grid[row][col] + min(dp[row + 1][col], dp[row][col + 1]);\n                }\n            }\n        }\n        return dp[0][0];\n    }\n")),(0,o.kt)("p",null,"\u8fd0\u884c\u65f6\u95f4\uff1a8.0ms, 81.37% \u8fd0\u884c\u5185\u5b58\uff1a9800KB, 64.50%"),(0,o.kt)("h3",{id:"debug"},"Debug"),(0,o.kt)("h4",{id:"max"},"max\u2026..."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"}," Line 1034:Char 34:runtime error: addition of unsigned offset to...")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https:/tva1.sinaimg.cn/large/008i3skNgy1gr24yfdy9ej30wa058q4b.jpg",alt:"error"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"    int minPathSum(vector<vector<int>>& grid) {\n        // dp[m][n]\u8bb0\u5f55\u5230\u8fbe\u5f53\u524d\u683c\u5b50\u65f6\u6240\u80fd\u83b7\u5f97\u7684\u6700\u5927\u503c\n        int m = grid.size(), n = grid[0].size();\n        vector<vector<int>> dp = grid;\n\n        for (int row = 0; row < m; row++){\n            for (int col = 0; col < n; col++){\n                dp[row][col] += max(dp[row - 1][col], dp[row][col - 1]);\n            }\n        }\n        return dp[m - 1][n - 1];\n    }\n")),(0,o.kt)("h4",{id:"buffer-overflow"},"Buffer Overflow"),(0,o.kt)("p",null,"\u4e0d\u8be5\u628a\u5907\u5fd8\u5f55\u521d\u59cb\u5316\u6210\u6570\u7ec4\u7684\u503c"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"==31==ERROR:AddressSanitizer: heap-buffer-overflow on address 0x60200000011c at pc\u2026")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"int minPathSum(vector<vector<int>>& grid) {\n  int m = grid.size(), n = grid[0].size();\n  vector<vector<int>> dp = grid;\n  dp[0][0] = grid[0][0];\n        for (int row = 0; row < m; row++){\n            for (int col = 0; col < n; col++){\n                dp[row + 1][col]\xa0= min(dp[row + 1][col] + grid[row][col], dp[row + 1][col]);\n                dp[row][col + 1] = min(dp[row][col] + grid[row][col + 1], dp[row][col + 1]);\n            }\n        }\n  return dp[m - 1][n - 1];\n}\n")))}u.isMDXComponent=!0}}]);